---
// import estilos css globales
import "../style/welcome.css";
---

<!-- BoxIcons CDN -->
<link
  href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
  rel="stylesheet"
/>

<!-- Loader -->
<div class="loader-container">
  <div class="loader">
    <img src="/SVG/Logo-1.svg" alt="GLLR Logo" class="loader-logo" />
    <div class="loader-message">Cargando recursos...</div>
    <div class="loader-status"></div>
    <div class="loader-progress">
      <div class="loader-progress-bar"></div>
    </div>
  </div>
</div>

<section class="welcome-contents">
  <img src="/SVG/EllipseFigma.svg" class="welcome-elipce-1 welcome-elipce" />
  <img src="/SVG/EllipseFigma.svg" class="welcome-elipce-2 welcome-elipce" />
  <div class="welcome-content-info">
    <div class="welcome-content-title">
      <div class="welcome-logo">
        <img src="/SVG/Logo-1.svg" />
      </div>
      <h1 class="welcome-title">
        Bienvenidos Al Sistema Que Gestiona Tus Notas
      </h1>
      <p class="welcome-content-sub-paragraph">
        GLLR es un sistema de gestión de notas que permite a los estudiantes
        llevar un control de sus calificaciones y a los profesores gestionar las
        notas de sus alumnos, facilitando así el proceso de evaluación y
        seguimiento del rendimiento académico, todo en un solo lugar, fácil de
        usar y accesible desde cualquier dispositivo con conexión a internet.
      </p>

      <button
        class="welcome-login btn btn-primary"
        data-bs-toggle="modal"
        data-bs-target="#loginModal"
      >
        Ver Mis Notas
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="currentColor"
          class="icon icon-tabler icons-tabler-filled icon-tabler-arrow-badge-right"
        >
          <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
          <path
            d="M7 6l-.112 .006a1 1 0 0 0 -.669 1.619l3.501 4.375l-3.5 4.375a1 1 0 0 0 .78 1.625h6a1 1 0 0 0 .78 -.375l4 -5a1 1 0 0 0 0 -1.25l-4 -5a1 1 0 0 0 -.78 -.375h-6z"
          ></path>
        </svg>
      </button>
    </div>

    <div class="welcome-content-image">
      <img src="/img/Desktop-Inicio.jpg" class="welcome-image" />
    </div>
  </div>
</section>

<!-- Modal LOGIN -->

<div
  class="modal fade"
  id="loginModal"
  tabindex="-1"
  aria-labelledby="loginModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <img class="ellipse-login" src="/SVG/EllipseFigma.svg" />
      <div class="modal-body">
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Cerrar"></button>
        <img class="logo-login" src="/SVG/Logo-1.svg" />
        <h5 class="modal-title" id="loginModalLabel">Bienvenido De Nuevo 👋</h5>
        <p class="login-modal-p">
          Inicia sesión para empezar la revisión de tus notas.
        </p>
        <form id="loginForm" autocomplete="off">
          <div class="mb-3">
            <label for="email" class="form-label">Usuario</label>
            <input
              type="text"
              class="form-control"
              id="email"
              name="email"
              placeholder="Example_User55"
              autocomplete="new-email"
              autocapitalize="off"
            />
          </div>
          <div class="mb-3">
            <label for="password" class="form-label">Contraseña</label>
            <div class="password-field">
              <input
                type="password"
                class="form-control"
                id="password"
                name="password"
                placeholder="Al menos 8 caracteres"
                autocomplete="new-password"
              />
              <button
                type="button"
                class="toggle-password"
                aria-label="Mostrar contraseña"
              >
                <i class="bx bx-hide"></i>
              </button>
            </div>
          </div>
          <button type="submit" class="btn btn-primary w-100">
            Iniciar Sesión
          </button>
          <div class="error-login">
            <i class="bx bx-alert-triangle"></i>
            <span id="error-login-message">Correo o contraseña incorrectos</span
            >
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script src="../scripts/login.js"></script>

<script>
  window.addEventListener("DOMContentLoaded", () => {
    const loaderContainer = document.querySelector(".loader-container");
    const welcomeContent = document.querySelector(".welcome-contents");
    const messageElement = document.querySelector(".loader-message");
    const statusElement = document.querySelector(".loader-status");
    const progressBar = document.querySelector(".loader-progress-bar");
    let progress = 0;
    let loadStartTime = Date.now();
    let resourcesLoaded = false;

    if (
      loaderContainer &&
      welcomeContent &&
      messageElement &&
      progressBar &&
      statusElement
    ) {
      welcomeContent.style.opacity = "0";

      // Función para mostrar estado de conexión
      const showConnectionStatus = () => {
        if ("connection" in navigator && navigator.connection) {
          const connection = navigator.connection;
          if (connection.downlink < 1) {
            statusElement.textContent = "Conexión lenta detectada";
            statusElement.classList.add("warning");
          } else if (connection.downlink < 2) {
            statusElement.textContent = "Conexión estable";
            statusElement.classList.add("info");
          }
        }
      };

      // Función para actualizar el progreso suavemente
      const updateProgress = (targetProgress) => {
        const increment = 1;
        const interval = setInterval(() => {
          if (progress < targetProgress) {
            progress += increment;
            progressBar.style.width = `${progress}%`;
          } else {
            clearInterval(interval);
            if (progress >= 100 && resourcesLoaded) {
              completeLoading();
            }
          }
        }, 20);
      };

      // Función para completar la carga
      const completeLoading = () => {
        messageElement.textContent = "¡Bienvenido a GLLR!";
        setTimeout(() => {
          loaderContainer.style.opacity = "0";
          welcomeContent.style.opacity = "1";
          setTimeout(() => {
            loaderContainer.style.display = "none";
          }, 500);
        }, 800);
      };

      // Verificar estado de conexión
      showConnectionStatus();

      // Monitorear progreso de carga
      const resources = Array.from(
        document.querySelectorAll('img, link[rel="stylesheet"], script'),
      );
      let loadedResources = 0;

      resources.forEach((resource) => {
        if (resource.complete) {
          loadedResources++;
        } else {
          resource.addEventListener("load", () => {
            loadedResources++;
            const percentLoaded = (loadedResources / resources.length) * 100;
            updateProgress(Math.max(percentLoaded, progress));
          });
        }
      });

      // Eventos de carga
      document.onreadystatechange = () => {
        if (document.readyState === "interactive") {
          updateProgress(Math.max(60, progress));
        }
      };

      // Cuando todo esté cargado
      window.addEventListener("load", () => {
        resourcesLoaded = true;
        const loadTime = Date.now() - loadStartTime;

        if (loadTime > 5000) {
          // Si tarda más de 5 segundos
          statusElement.textContent =
            "La carga está tomando más tiempo de lo esperado";
          statusElement.classList.add("warning");
        }

        updateProgress(100);
      });
    }

    // Funcionalidad para el campo de contraseña
    const passwordInput = document.querySelector("#password");
    const togglePassword = document.querySelector(".toggle-password");

    if (passwordInput && togglePassword) {
      // Mostrar/ocultar contraseña con el botón
      togglePassword.addEventListener("click", () => {
        const type = passwordInput.type === "password" ? "text" : "password";
        passwordInput.type = type;
        togglePassword.querySelector("i").className =
          `bx ${type === "password" ? "bx-hide" : "bx-show"}`;
      });

      // Asegurar que la contraseña esté oculta al perder el foco
      passwordInput.addEventListener("blur", () => {
        passwordInput.type = "password";
        togglePassword.querySelector("i").className = "bx bx-hide";
      });
    }
  });
</script>

<style>
  .password-field {
    position: relative;
  }
</style>
